// Generated by CoffeeScript 2.0.2
(function() {
  // setup #
  var build, clr, cmd, debug, error, fs, path, status;

  cmd = require('node-cmd');

  path = require('path');

  fs = require('fs');

  clr = require('cli-color');

  // create colors #
  error = clr.red.bold;

  debug = clr.yellow.bold;

  status = clr.green.bold;

  build = (function() {
    var compileFiles, findCommand, fromDir;

    // write functions #
    class build {};

    findCommand = function(filename, command) {
      var out;
      out = filename.replace("[fn]", filename);
      return out;
    };

    fromDir = function(startPath, filter, addTo) {
      var filename, files, i, stat;
      console.log(status('[GETFILES]') + ' Starting from dir ' + startPath + '/');
      if (!fs.existsSync(startPath)) {
        throw error('[GETFILES][ERROR]') + ' No directory provided. ' + startPath;
        return;
      }
      files = fs.readdirSync(startPath);
      i = 0;
      while (i < files.length) {
        filename = path.join(startPath, files[i]);
        stat = fs.lstatSync(filename);
        if (filename !== __filename) {
          if (stat.isDirectory()) {
            fromDir(filename, filter);
          //recurse
          } else if (filename.indexOf(filter) >= 0) {
            console.log(status('[GETFILES]') + ' Found: ' + filename);
            // push filename to file array #
            addTo.push(filename);
            console.log(status('[GETFILES]') + ' Pushed ' + filename + ' to array');
            console.log(status('[GETFILES]') + ' Files to compile: ' + addTo);
          } else {
            throw ' ';
            console.log(error('[GETFILES][ERROR] ') + "No files to compile!");
          }
        }
        i++;
      }
    };

    compileFiles = function(list) {
      var i, j, len, results;
      results = [];
      for (j = 0, len = list.length; j < len; j++) {
        i = list[j];
        console.log(debug('[DEBUG][COMPILEFILES]') + ' Will run command: "' + 'coffee -c ' + i + '"');
        results.push(cmd.run('coffee -c ""' + i + '"'));
      }
      return results;
    };

    return build;

  })();

  module.exports = build;

}).call(this);
